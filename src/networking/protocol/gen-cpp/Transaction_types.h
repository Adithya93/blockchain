/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Transaction_TYPES_H
#define Transaction_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




class TransactionOutputMessage;

class TransactionInputMessage;

class UnspentTransactionOutputMessage;

class TransactionMessage;

typedef struct _TransactionOutputMessage__isset {
  _TransactionOutputMessage__isset() : address(false), data(false) {}
  bool address :1;
  bool data :1;
} _TransactionOutputMessage__isset;

class TransactionOutputMessage : public virtual ::apache::thrift::TBase {
 public:

  TransactionOutputMessage(const TransactionOutputMessage&);
  TransactionOutputMessage& operator=(const TransactionOutputMessage&);
  TransactionOutputMessage() : address(), data(0) {
  }

  virtual ~TransactionOutputMessage() throw();
  std::string address;
  double data;

  _TransactionOutputMessage__isset __isset;

  void __set_address(const std::string& val);

  void __set_data(const double val);

  bool operator == (const TransactionOutputMessage & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TransactionOutputMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransactionOutputMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TransactionOutputMessage &a, TransactionOutputMessage &b);

std::ostream& operator<<(std::ostream& out, const TransactionOutputMessage& obj);

typedef struct _TransactionInputMessage__isset {
  _TransactionInputMessage__isset() : sourceTransactionId(false), sourceTransactionIndex(false), signature(false) {}
  bool sourceTransactionId :1;
  bool sourceTransactionIndex :1;
  bool signature :1;
} _TransactionInputMessage__isset;

class TransactionInputMessage : public virtual ::apache::thrift::TBase {
 public:

  TransactionInputMessage(const TransactionInputMessage&);
  TransactionInputMessage& operator=(const TransactionInputMessage&);
  TransactionInputMessage() : sourceTransactionId(), sourceTransactionIndex(0), signature() {
  }

  virtual ~TransactionInputMessage() throw();
  std::string sourceTransactionId;
  int32_t sourceTransactionIndex;
  std::string signature;

  _TransactionInputMessage__isset __isset;

  void __set_sourceTransactionId(const std::string& val);

  void __set_sourceTransactionIndex(const int32_t val);

  void __set_signature(const std::string& val);

  bool operator == (const TransactionInputMessage & rhs) const
  {
    if (!(sourceTransactionId == rhs.sourceTransactionId))
      return false;
    if (!(sourceTransactionIndex == rhs.sourceTransactionIndex))
      return false;
    if (!(signature == rhs.signature))
      return false;
    return true;
  }
  bool operator != (const TransactionInputMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransactionInputMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TransactionInputMessage &a, TransactionInputMessage &b);

std::ostream& operator<<(std::ostream& out, const TransactionInputMessage& obj);

typedef struct _UnspentTransactionOutputMessage__isset {
  _UnspentTransactionOutputMessage__isset() : sourceTransactionId(false), sourceTransactionIndex(false), sourceTransactionAddress(false), data(false) {}
  bool sourceTransactionId :1;
  bool sourceTransactionIndex :1;
  bool sourceTransactionAddress :1;
  bool data :1;
} _UnspentTransactionOutputMessage__isset;

class UnspentTransactionOutputMessage : public virtual ::apache::thrift::TBase {
 public:

  UnspentTransactionOutputMessage(const UnspentTransactionOutputMessage&);
  UnspentTransactionOutputMessage& operator=(const UnspentTransactionOutputMessage&);
  UnspentTransactionOutputMessage() : sourceTransactionId(), sourceTransactionIndex(0), sourceTransactionAddress(), data(0) {
  }

  virtual ~UnspentTransactionOutputMessage() throw();
  std::string sourceTransactionId;
  int32_t sourceTransactionIndex;
  std::string sourceTransactionAddress;
  double data;

  _UnspentTransactionOutputMessage__isset __isset;

  void __set_sourceTransactionId(const std::string& val);

  void __set_sourceTransactionIndex(const int32_t val);

  void __set_sourceTransactionAddress(const std::string& val);

  void __set_data(const double val);

  bool operator == (const UnspentTransactionOutputMessage & rhs) const
  {
    if (!(sourceTransactionId == rhs.sourceTransactionId))
      return false;
    if (!(sourceTransactionIndex == rhs.sourceTransactionIndex))
      return false;
    if (!(sourceTransactionAddress == rhs.sourceTransactionAddress))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const UnspentTransactionOutputMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UnspentTransactionOutputMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(UnspentTransactionOutputMessage &a, UnspentTransactionOutputMessage &b);

std::ostream& operator<<(std::ostream& out, const UnspentTransactionOutputMessage& obj);

typedef struct _TransactionMessage__isset {
  _TransactionMessage__isset() : transactionId(false), transactionInputs(false), transactionOutputs(false) {}
  bool transactionId :1;
  bool transactionInputs :1;
  bool transactionOutputs :1;
} _TransactionMessage__isset;

class TransactionMessage : public virtual ::apache::thrift::TBase {
 public:

  TransactionMessage(const TransactionMessage&);
  TransactionMessage& operator=(const TransactionMessage&);
  TransactionMessage() : transactionId() {
  }

  virtual ~TransactionMessage() throw();
  std::string transactionId;
  std::vector<TransactionInputMessage>  transactionInputs;
  std::vector<TransactionOutputMessage>  transactionOutputs;

  _TransactionMessage__isset __isset;

  void __set_transactionId(const std::string& val);

  void __set_transactionInputs(const std::vector<TransactionInputMessage> & val);

  void __set_transactionOutputs(const std::vector<TransactionOutputMessage> & val);

  bool operator == (const TransactionMessage & rhs) const
  {
    if (!(transactionId == rhs.transactionId))
      return false;
    if (!(transactionInputs == rhs.transactionInputs))
      return false;
    if (!(transactionOutputs == rhs.transactionOutputs))
      return false;
    return true;
  }
  bool operator != (const TransactionMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransactionMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TransactionMessage &a, TransactionMessage &b);

std::ostream& operator<<(std::ostream& out, const TransactionMessage& obj);



#endif
