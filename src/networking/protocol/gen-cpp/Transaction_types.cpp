/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Transaction_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




TransactionOutputMessage::~TransactionOutputMessage() throw() {
}


void TransactionOutputMessage::__set_address(const std::string& val) {
  this->address = val;
}

void TransactionOutputMessage::__set_data(const double val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const TransactionOutputMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TransactionOutputMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TransactionOutputMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TransactionOutputMessage");

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TransactionOutputMessage &a, TransactionOutputMessage &b) {
  using ::std::swap;
  swap(a.address, b.address);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TransactionOutputMessage::TransactionOutputMessage(const TransactionOutputMessage& other0) {
  address = other0.address;
  data = other0.data;
  __isset = other0.__isset;
}
TransactionOutputMessage& TransactionOutputMessage::operator=(const TransactionOutputMessage& other1) {
  address = other1.address;
  data = other1.data;
  __isset = other1.__isset;
  return *this;
}
void TransactionOutputMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TransactionOutputMessage(";
  out << "address=" << to_string(address);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


TransactionInputMessage::~TransactionInputMessage() throw() {
}


void TransactionInputMessage::__set_sourceTransactionId(const std::string& val) {
  this->sourceTransactionId = val;
}

void TransactionInputMessage::__set_sourceTransactionIndex(const int32_t val) {
  this->sourceTransactionIndex = val;
}

void TransactionInputMessage::__set_signature(const std::string& val) {
  this->signature = val;
}
std::ostream& operator<<(std::ostream& out, const TransactionInputMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TransactionInputMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->sourceTransactionId);
          this->__isset.sourceTransactionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sourceTransactionIndex);
          this->__isset.sourceTransactionIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->signature);
          this->__isset.signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TransactionInputMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TransactionInputMessage");

  xfer += oprot->writeFieldBegin("sourceTransactionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->sourceTransactionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sourceTransactionIndex", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sourceTransactionIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->signature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TransactionInputMessage &a, TransactionInputMessage &b) {
  using ::std::swap;
  swap(a.sourceTransactionId, b.sourceTransactionId);
  swap(a.sourceTransactionIndex, b.sourceTransactionIndex);
  swap(a.signature, b.signature);
  swap(a.__isset, b.__isset);
}

TransactionInputMessage::TransactionInputMessage(const TransactionInputMessage& other2) {
  sourceTransactionId = other2.sourceTransactionId;
  sourceTransactionIndex = other2.sourceTransactionIndex;
  signature = other2.signature;
  __isset = other2.__isset;
}
TransactionInputMessage& TransactionInputMessage::operator=(const TransactionInputMessage& other3) {
  sourceTransactionId = other3.sourceTransactionId;
  sourceTransactionIndex = other3.sourceTransactionIndex;
  signature = other3.signature;
  __isset = other3.__isset;
  return *this;
}
void TransactionInputMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TransactionInputMessage(";
  out << "sourceTransactionId=" << to_string(sourceTransactionId);
  out << ", " << "sourceTransactionIndex=" << to_string(sourceTransactionIndex);
  out << ", " << "signature=" << to_string(signature);
  out << ")";
}


UnspentTransactionOutputMessage::~UnspentTransactionOutputMessage() throw() {
}


void UnspentTransactionOutputMessage::__set_sourceTransactionId(const std::string& val) {
  this->sourceTransactionId = val;
}

void UnspentTransactionOutputMessage::__set_sourceTransactionIndex(const int32_t val) {
  this->sourceTransactionIndex = val;
}

void UnspentTransactionOutputMessage::__set_sourceTransactionAddress(const std::string& val) {
  this->sourceTransactionAddress = val;
}

void UnspentTransactionOutputMessage::__set_data(const double val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const UnspentTransactionOutputMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UnspentTransactionOutputMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->sourceTransactionId);
          this->__isset.sourceTransactionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sourceTransactionIndex);
          this->__isset.sourceTransactionIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->sourceTransactionAddress);
          this->__isset.sourceTransactionAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnspentTransactionOutputMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UnspentTransactionOutputMessage");

  xfer += oprot->writeFieldBegin("sourceTransactionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->sourceTransactionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sourceTransactionIndex", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->sourceTransactionIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sourceTransactionAddress", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->sourceTransactionAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UnspentTransactionOutputMessage &a, UnspentTransactionOutputMessage &b) {
  using ::std::swap;
  swap(a.sourceTransactionId, b.sourceTransactionId);
  swap(a.sourceTransactionIndex, b.sourceTransactionIndex);
  swap(a.sourceTransactionAddress, b.sourceTransactionAddress);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

UnspentTransactionOutputMessage::UnspentTransactionOutputMessage(const UnspentTransactionOutputMessage& other4) {
  sourceTransactionId = other4.sourceTransactionId;
  sourceTransactionIndex = other4.sourceTransactionIndex;
  sourceTransactionAddress = other4.sourceTransactionAddress;
  data = other4.data;
  __isset = other4.__isset;
}
UnspentTransactionOutputMessage& UnspentTransactionOutputMessage::operator=(const UnspentTransactionOutputMessage& other5) {
  sourceTransactionId = other5.sourceTransactionId;
  sourceTransactionIndex = other5.sourceTransactionIndex;
  sourceTransactionAddress = other5.sourceTransactionAddress;
  data = other5.data;
  __isset = other5.__isset;
  return *this;
}
void UnspentTransactionOutputMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UnspentTransactionOutputMessage(";
  out << "sourceTransactionId=" << to_string(sourceTransactionId);
  out << ", " << "sourceTransactionIndex=" << to_string(sourceTransactionIndex);
  out << ", " << "sourceTransactionAddress=" << to_string(sourceTransactionAddress);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


TransactionMessage::~TransactionMessage() throw() {
}


void TransactionMessage::__set_transactionId(const std::string& val) {
  this->transactionId = val;
}

void TransactionMessage::__set_transactionInputs(const std::vector<TransactionInputMessage> & val) {
  this->transactionInputs = val;
}

void TransactionMessage::__set_transactionOutputs(const std::vector<TransactionOutputMessage> & val) {
  this->transactionOutputs = val;
}
std::ostream& operator<<(std::ostream& out, const TransactionMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TransactionMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->transactionId);
          this->__isset.transactionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->transactionInputs.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->transactionInputs.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->transactionInputs[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.transactionInputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->transactionOutputs.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->transactionOutputs.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += this->transactionOutputs[_i15].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.transactionOutputs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TransactionMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TransactionMessage");

  xfer += oprot->writeFieldBegin("transactionId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->transactionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transactionInputs", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->transactionInputs.size()));
    std::vector<TransactionInputMessage> ::const_iterator _iter16;
    for (_iter16 = this->transactionInputs.begin(); _iter16 != this->transactionInputs.end(); ++_iter16)
    {
      xfer += (*_iter16).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transactionOutputs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->transactionOutputs.size()));
    std::vector<TransactionOutputMessage> ::const_iterator _iter17;
    for (_iter17 = this->transactionOutputs.begin(); _iter17 != this->transactionOutputs.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TransactionMessage &a, TransactionMessage &b) {
  using ::std::swap;
  swap(a.transactionId, b.transactionId);
  swap(a.transactionInputs, b.transactionInputs);
  swap(a.transactionOutputs, b.transactionOutputs);
  swap(a.__isset, b.__isset);
}

TransactionMessage::TransactionMessage(const TransactionMessage& other18) {
  transactionId = other18.transactionId;
  transactionInputs = other18.transactionInputs;
  transactionOutputs = other18.transactionOutputs;
  __isset = other18.__isset;
}
TransactionMessage& TransactionMessage::operator=(const TransactionMessage& other19) {
  transactionId = other19.transactionId;
  transactionInputs = other19.transactionInputs;
  transactionOutputs = other19.transactionOutputs;
  __isset = other19.__isset;
  return *this;
}
void TransactionMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TransactionMessage(";
  out << "transactionId=" << to_string(transactionId);
  out << ", " << "transactionInputs=" << to_string(transactionInputs);
  out << ", " << "transactionOutputs=" << to_string(transactionOutputs);
  out << ")";
}


