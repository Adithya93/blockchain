/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Blockchain_TYPES_H
#define Blockchain_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>
#include "Transaction_types.h"




class BlockMessage;

class BlockchainMessage;

typedef struct _BlockMessage__isset {
  _BlockMessage__isset() : blockIndex(false), blockHash(false), previousBlockHash(false), timestamp(false), data(false), difficulty(false), nonce(false) {}
  bool blockIndex :1;
  bool blockHash :1;
  bool previousBlockHash :1;
  bool timestamp :1;
  bool data :1;
  bool difficulty :1;
  bool nonce :1;
} _BlockMessage__isset;

class BlockMessage : public virtual ::apache::thrift::TBase {
 public:

  BlockMessage(const BlockMessage&);
  BlockMessage& operator=(const BlockMessage&);
  BlockMessage() : blockIndex(0), blockHash(), previousBlockHash(), timestamp(0), difficulty(0), nonce(0) {
  }

  virtual ~BlockMessage() throw();
  int32_t blockIndex;
  std::string blockHash;
  std::string previousBlockHash;
  int64_t timestamp;
  std::vector< ::TransactionMessage>  data;
  int32_t difficulty;
  int64_t nonce;

  _BlockMessage__isset __isset;

  void __set_blockIndex(const int32_t val);

  void __set_blockHash(const std::string& val);

  void __set_previousBlockHash(const std::string& val);

  void __set_timestamp(const int64_t val);

  void __set_data(const std::vector< ::TransactionMessage> & val);

  void __set_difficulty(const int32_t val);

  void __set_nonce(const int64_t val);

  bool operator == (const BlockMessage & rhs) const
  {
    if (!(blockIndex == rhs.blockIndex))
      return false;
    if (!(blockHash == rhs.blockHash))
      return false;
    if (!(previousBlockHash == rhs.previousBlockHash))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(difficulty == rhs.difficulty))
      return false;
    if (!(nonce == rhs.nonce))
      return false;
    return true;
  }
  bool operator != (const BlockMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BlockMessage &a, BlockMessage &b);

std::ostream& operator<<(std::ostream& out, const BlockMessage& obj);

typedef struct _BlockchainMessage__isset {
  _BlockchainMessage__isset() : miningReward(false), difficulty(false), chain(false) {}
  bool miningReward :1;
  bool difficulty :1;
  bool chain :1;
} _BlockchainMessage__isset;

class BlockchainMessage : public virtual ::apache::thrift::TBase {
 public:

  BlockchainMessage(const BlockchainMessage&);
  BlockchainMessage& operator=(const BlockchainMessage&);
  BlockchainMessage() : miningReward(0), difficulty(0) {
  }

  virtual ~BlockchainMessage() throw();
  double miningReward;
  int32_t difficulty;
  std::vector<BlockMessage>  chain;

  _BlockchainMessage__isset __isset;

  void __set_miningReward(const double val);

  void __set_difficulty(const int32_t val);

  void __set_chain(const std::vector<BlockMessage> & val);

  bool operator == (const BlockchainMessage & rhs) const
  {
    if (!(miningReward == rhs.miningReward))
      return false;
    if (!(difficulty == rhs.difficulty))
      return false;
    if (!(chain == rhs.chain))
      return false;
    return true;
  }
  bool operator != (const BlockchainMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockchainMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(BlockchainMessage &a, BlockchainMessage &b);

std::ostream& operator<<(std::ostream& out, const BlockchainMessage& obj);



#endif
