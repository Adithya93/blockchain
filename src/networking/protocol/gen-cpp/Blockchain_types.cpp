/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Blockchain_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




BlockMessage::~BlockMessage() throw() {
}


void BlockMessage::__set_blockIndex(const int32_t val) {
  this->blockIndex = val;
}

void BlockMessage::__set_blockHash(const std::string& val) {
  this->blockHash = val;
}

void BlockMessage::__set_previousBlockHash(const std::string& val) {
  this->previousBlockHash = val;
}

void BlockMessage::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void BlockMessage::__set_data(const std::vector< ::TransactionMessage> & val) {
  this->data = val;
}

void BlockMessage::__set_difficulty(const int32_t val) {
  this->difficulty = val;
}

void BlockMessage::__set_nonce(const int64_t val) {
  this->nonce = val;
}
std::ostream& operator<<(std::ostream& out, const BlockMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BlockMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->blockIndex);
          this->__isset.blockIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->blockHash);
          this->__isset.blockHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->previousBlockHash);
          this->__isset.previousBlockHash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->data.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->data.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->data[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->difficulty);
          this->__isset.difficulty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->nonce);
          this->__isset.nonce = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BlockMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BlockMessage");

  xfer += oprot->writeFieldBegin("blockIndex", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->blockIndex);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("blockHash", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->blockHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("previousBlockHash", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->previousBlockHash);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->data.size()));
    std::vector< ::TransactionMessage> ::const_iterator _iter5;
    for (_iter5 = this->data.begin(); _iter5 != this->data.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("difficulty", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->difficulty);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nonce", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->nonce);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BlockMessage &a, BlockMessage &b) {
  using ::std::swap;
  swap(a.blockIndex, b.blockIndex);
  swap(a.blockHash, b.blockHash);
  swap(a.previousBlockHash, b.previousBlockHash);
  swap(a.timestamp, b.timestamp);
  swap(a.data, b.data);
  swap(a.difficulty, b.difficulty);
  swap(a.nonce, b.nonce);
  swap(a.__isset, b.__isset);
}

BlockMessage::BlockMessage(const BlockMessage& other6) {
  blockIndex = other6.blockIndex;
  blockHash = other6.blockHash;
  previousBlockHash = other6.previousBlockHash;
  timestamp = other6.timestamp;
  data = other6.data;
  difficulty = other6.difficulty;
  nonce = other6.nonce;
  __isset = other6.__isset;
}
BlockMessage& BlockMessage::operator=(const BlockMessage& other7) {
  blockIndex = other7.blockIndex;
  blockHash = other7.blockHash;
  previousBlockHash = other7.previousBlockHash;
  timestamp = other7.timestamp;
  data = other7.data;
  difficulty = other7.difficulty;
  nonce = other7.nonce;
  __isset = other7.__isset;
  return *this;
}
void BlockMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BlockMessage(";
  out << "blockIndex=" << to_string(blockIndex);
  out << ", " << "blockHash=" << to_string(blockHash);
  out << ", " << "previousBlockHash=" << to_string(previousBlockHash);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "data=" << to_string(data);
  out << ", " << "difficulty=" << to_string(difficulty);
  out << ", " << "nonce=" << to_string(nonce);
  out << ")";
}


BlockchainMessage::~BlockchainMessage() throw() {
}


void BlockchainMessage::__set_miningReward(const double val) {
  this->miningReward = val;
}

void BlockchainMessage::__set_difficulty(const int32_t val) {
  this->difficulty = val;
}

void BlockchainMessage::__set_chain(const std::vector<BlockMessage> & val) {
  this->chain = val;
}
std::ostream& operator<<(std::ostream& out, const BlockchainMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BlockchainMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->miningReward);
          this->__isset.miningReward = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->difficulty);
          this->__isset.difficulty = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->chain.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->chain.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->chain[_i12].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.chain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BlockchainMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BlockchainMessage");

  xfer += oprot->writeFieldBegin("miningReward", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->miningReward);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("difficulty", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->difficulty);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("chain", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->chain.size()));
    std::vector<BlockMessage> ::const_iterator _iter13;
    for (_iter13 = this->chain.begin(); _iter13 != this->chain.end(); ++_iter13)
    {
      xfer += (*_iter13).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BlockchainMessage &a, BlockchainMessage &b) {
  using ::std::swap;
  swap(a.miningReward, b.miningReward);
  swap(a.difficulty, b.difficulty);
  swap(a.chain, b.chain);
  swap(a.__isset, b.__isset);
}

BlockchainMessage::BlockchainMessage(const BlockchainMessage& other14) {
  miningReward = other14.miningReward;
  difficulty = other14.difficulty;
  chain = other14.chain;
  __isset = other14.__isset;
}
BlockchainMessage& BlockchainMessage::operator=(const BlockchainMessage& other15) {
  miningReward = other15.miningReward;
  difficulty = other15.difficulty;
  chain = other15.chain;
  __isset = other15.__isset;
  return *this;
}
void BlockchainMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BlockchainMessage(";
  out << "miningReward=" << to_string(miningReward);
  out << ", " << "difficulty=" << to_string(difficulty);
  out << ", " << "chain=" << to_string(chain);
  out << ")";
}


