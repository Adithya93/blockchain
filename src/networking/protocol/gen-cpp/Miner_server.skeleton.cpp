// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Miner.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

/*
class MinerHandler : virtual public MinerIf {
 public:
  MinerHandler() {
    // Your initialization goes here
  }

  bool addTransactionToPool(const  ::TransactionMessage& transaction) {
    // Your implementation goes here
    printf("addTransactionToPool\n");
  }

  int32_t receiveTransactionPool(const std::vector< ::TransactionMessage> & transactions) {
    // Your implementation goes here
    printf("receiveTransactionPool\n");
  }

  bool receiveNewBlock(const  ::BlockMessage& newBlock) {
    // Your implementation goes here
    printf("receiveNewBlock\n");
  }

  bool receiveChain(const  ::BlockchainMessage& chain) {
    // Your implementation goes here
    printf("receiveChain\n");
  }

  void getLatestBlock( ::BlockMessage& _return) {
    // Your implementation goes here
    printf("getLatestBlock\n");
  }

  void getBlockchain( ::BlockchainMessage& _return) {
    // Your implementation goes here
    printf("getBlockchain\n");
  }

};
*/

/*
int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<MinerHandler> handler(new MinerHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new MinerProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
*/
